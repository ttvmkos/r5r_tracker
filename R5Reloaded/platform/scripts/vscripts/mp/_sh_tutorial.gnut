global function ShTutorial_Init

#if SERVER
global function SetTutorialContext
global function IsTutorialContextCompleted
global function UpdateActionCount
#endif

#if CLIENT
global function ServerCallback_ActionCountUpdated
#endif

global struct InputHint
{
	string                                                 buttonText
	string												   gamepadButtonText
	string                                                 hintText
	string                                                 altHintText
	int                                                    triggerButtonEnum
	bool functionref( entity player, InputHint inputHint ) triggerCallback
	void functionref( entity player, InputHint inputHint ) altHintCallback
	int                                                    requiredActionCount = 3

	bool hideWithMenus = true

	int context = -1
	int index = -1
	var rui = null

	bool _completed = false
}

global enum eTutorialContext
{
	NONE = -1,
	MOVEMENT = 0,
	LOOT_BIN,
	LOOT_BIN_ITEMS,
	ORDNANCE,
	WEAPON_LOOT_BIN,
	WEAPON_PICKUP,
	WEAPON,
	WEAPON_SWAP,
	PING,
	PATHFINDER,
	REVIVE,
	HEALING_DRONE,
	PICK_UP_DNA,
	RESPAWN_CHAMBER,
	ULTIMATE,
	PRELAUNCH,
	FREEFALL,

	_count
}

struct
{
	array<InputHint>                    inputHints
	table< int, array< InputHint > >    contextInputHintMap
	table< entity, array<bool> >        playerTutorialContextHistory
} file

table<int, void functionref( entity player ) > baseInputCallbacks

void function ShTutorial_Init()
{
	if ( !IsSurvivalTraining() )
		return

	#if SERVER
		AddCallback_OnClientConnected( OnPlayerConnected )
	#elseif CLIENT
		AddCallback_OnClientScriptInit( OnLocalClientConnected )
		AddCallback_OnSettingsUpdated( UpdateTutorialWhenOptionsChange )
		RegisterNetworkedVariableChangeCallback_int( "tutorialContext", OnTutorialContextChanged )
	#endif

	for( int i = eTutorialContext.NONE ; i < eTutorialContext._count ; i++ )
		file.contextInputHintMap[i] <- []

	AddInputHint( eTutorialContext.MOVEMENT, IN_FORWARD, "%[S2_UP|forward]%", "#SURVIVAL_TRAINING_MOVE", TryActionMove, "", null, "%S2_UP%" )
	AddInputHint( eTutorialContext.MOVEMENT, -1, "%speed%", "#SURVIVAL_TRAINING_SPRINT", TryActionSprint )
	AddInputHint( eTutorialContext.MOVEMENT, IN_JUMP, "%jump%", "#SURVIVAL_TRAINING_JUMP", TryActionJump )
	AddInputHint( eTutorialContext.MOVEMENT, -1, "%duck%", "#SURVIVAL_TRAINING_SLIDE", TryActionSlide )
	AddInputHint( eTutorialContext.MOVEMENT, IN_DUCK, "%duck%", "#SURVIVAL_TRAINING_CROUCH", TryActionCrouch )

	AddInputHint( eTutorialContext.LOOT_BIN, -1, "%use%", "#SURVIVAL_TRAINING_OPEN_BIN", Tutorial_TryAction_OpenLootBin1 )

	AddInputHint( eTutorialContext.LOOT_BIN_ITEMS, -1, "%use%", "#SURVIVAL_TRAINING_TAKE_FRAG", Tutorial_TryAction_TakeFrag )
	AddInputHint( eTutorialContext.LOOT_BIN_ITEMS, -1, "%use%", "#SURVIVAL_TRAINING_TAKE_THERMITE", Tutorial_TryAction_TakeThermite )
	AddInputHint( eTutorialContext.LOOT_BIN_ITEMS, -1, "%use%", "#SURVIVAL_TRAINING_TAKE_HEALTH", Tutorial_TryAction_TakeHealth )

	AddInputHint( eTutorialContext.ORDNANCE, -1, "%weaponSelectOrdnance%", "#SURVIVAL_TRAINING_SWAP_GRENADE", Tutorial_TryAction_SwapGrenade )
	AddInputHint( eTutorialContext.ORDNANCE, -1, "%attack%", "#SURVIVAL_TRAINING_THROW_GRENADE", Tutorial_TryAction_ThrewGrenade )
	AddInputHint( eTutorialContext.ORDNANCE, -1, "#SURVIVAL_TRAINING_TAP_HEAL_BIND", "#SURVIVAL_TRAINING_USE_HEALTHKIT", Tutorial_TryAction_UseHealth )
	AddInputHint( eTutorialContext.ORDNANCE, -1, "#SURVIVAL_TRAINING_ORDNANCE_MENU_BIND", "#SURVIVAL_TRAINING_USE_ORDNANCE_MENU", Tutorial_TryAction_OrdnanceMenu )

	AddInputHint( eTutorialContext.WEAPON_LOOT_BIN, -1, "%use%", "#SURVIVAL_TRAINING_OPEN_BIN", Tutorial_TryAction_OpenLootBin2 )

	AddInputHint( eTutorialContext.WEAPON_PICKUP, -1, "%use%", "#SURVIVAL_TRAINING_PICK_UP_WEAPON", Tutorial_TryAction_PickedUpWeapon )
	AddInputHint( eTutorialContext.WEAPON_PICKUP, -1, "%use%", "#SURVIVAL_TRAINING_PICK_UP_AMMO", Tutorial_TryAction_PickedUpAmmo )

	AddInputHint( eTutorialContext.WEAPON, IN_ZOOM, "%zoom%", "#SURVIVAL_TRAINING_AIM", TryActionADS )
	AddInputHint( eTutorialContext.WEAPON, IN_RELOAD, "%&reload%", "#SURVIVAL_TRAINING_RELOAD", TryActionReload )
	AddInputHint( eTutorialContext.WEAPON, -1, "", "#SURVIVAL_TRAINING_SHOOT_TARGETS", Tutorial_TryAction_ShotTrainingTargets )

	AddInputHint( eTutorialContext.WEAPON_SWAP, -1, "%use%", "#SURVIVAL_TRAINING_SECOND_WEAPON", Tutorial_TryAction_SecondWeapon )
	AddInputHint( eTutorialContext.WEAPON_SWAP, IN_WEAPON_CYCLE, "%weaponcycle%", "#SURVIVAL_TRAINING_SWITCH_WEAPONS", TryActionWeaponCycle )
	AddInputHint( eTutorialContext.WEAPON_SWAP, -1, "#SURVIVAL_TRAINING_HOLD_USE_BIND", "#SURVIVAL_TRAINING_REPLACE_WEAPON", Tutorial_TryAction_ThirdWeapon )

	AddInputHint( eTutorialContext.PING, IN_PING, "%ping%", "#SURVIVAL_TRAINING_PING_LOCATION", TryActionPing )
	AddInputHint( eTutorialContext.PING, -1, "#SURVIVAL_TRAINING_DOUBLE_PING", "#SURVIVAL_TRAINING_PING_ENEMY_LOCATION", Tutorial_TryAction_PingEnemyLocation )
	AddInputHint( eTutorialContext.PING, -1, "%ping%", "#SURVIVAL_TRAINING_PING_WEAPON", Tutorial_TryAction_PingWeapon )
	AddInputHint( eTutorialContext.PING, -1, "%ping%", "#SURVIVAL_TRAINING_PING_AMMO", Tutorial_TryAction_PingAmmo )
	AddInputHint( eTutorialContext.PING, -1, "#SURVIVAL_TRAINING_HOLD_PING", "#SURVIVAL_TRAINING_PING_MENU", Tutorial_TryAction_PingMenu )

	AddInputHint( eTutorialContext.PATHFINDER, -1, "", "#SURVIVAL_TRAINING_PATHFINDER", Tutorial_TryAction_Pathfinder )
	AddInputHint( eTutorialContext.PATHFINDER, -1, "#SURVIVAL_TRAINING_HOLSTER_BIND", "#SURVIVAL_TRAINING_HOLSTER", TryActionHolster, "", null, "#SURVIVAL_TRAINING_HOLSTER_BIND_GAMEPAD" )

	AddInputHint( eTutorialContext.REVIVE, -1, "%&use_long%", "#SURVIVAL_TRAINING_REVIVE", Tutorial_TryAction_ReviveDummy )

	AddInputHint( eTutorialContext.HEALING_DRONE, -1, "%offhand1%", "#SURVIVAL_TRAINING_USE_TACTICAL", Tutorial_TryAction_HealDummy )

	AddInputHint( eTutorialContext.PICK_UP_DNA, -1, "%use%", "#SURVIVAL_TRAINING_PICK_UP_CARD", Tutorial_TryAction_PickUpDNA )

	AddInputHint( eTutorialContext.RESPAWN_CHAMBER, -1, "#SURVIVAL_TRAINING_HOLD_USE_BIND", "#SURVIVAL_TRAINING_RESPAWN", Tutorial_TryAction_UsedRespawnChamber )

	AddInputHint( eTutorialContext.ULTIMATE, -1, "%offhand4%", "#SURVIVAL_TRAINING_USE_ULTIMATE", Tutorial_TryAction_UsedUltimate, "", null, "%offhand1%+%ping%" )

	AddInputHint( eTutorialContext.PRELAUNCH, IN_PING, "%ping%", "#SURVIVAL_TUTORIAL_PING_SUGGEST", TryActionPing, "#SURVIVAL_TUTORIAL_PING_DEST", PingAltHintInit )

	AddInputHint( eTutorialContext.FREEFALL, IN_FORWARD, "%[S2_UP|forward]%", "#SURVIVAL_TUTORIAL_ADJUST_SPEED", TryActionMove )
	AddInputHint( eTutorialContext.FREEFALL, -1, "%zoom%", "#SURVIVAL_TUTORIAL_FREE_LOOK", TryActionFreeLook )


	//AddInputHint( eTutorialContext.WEAPON, -1, "%scriptCommand3%", "Toggle Fire Mode", TryActionFireMode )
	//AddInputHint( eTutorialContext.WEAPON, IN_OFFHAND1, "%offhand1%", "Tactical", TryActionTactical )
}

#if SERVER
void function SetTutorialContext( entity player, int context )
{
	Assert( context >= eTutorialContext.NONE && context < eTutorialContext._count )
	player.SetPlayerNetInt( "tutorialContext", context )
}

void function OnPlayerConnected( entity player )
{
	foreach ( index, inputHint in file.inputHints )
	{
		if ( inputHint.triggerButtonEnum < 0 )
			continue

		if ( inputHint.triggerButtonEnum == IN_FORWARD )
		{
			//comented out for function ref type change to bool - mkos
			//AddPlayerPressedForwardCallback( player, baseInputCallbacks[inputHint.triggerButtonEnum], 1.0, true )
			//AddPlayerPressedBackCallback( player, baseInputCallbacks[inputHint.triggerButtonEnum], 1.0, true )
		}
		else
		{
			AddOptionalButtonPressedPlayerInputCallback( player, inputHint.triggerButtonEnum, baseInputCallbacks[inputHint.triggerButtonEnum] )
		}

		if ( inputHint.triggerButtonEnum == IN_DUCK )
			AddOptionalButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE, baseInputCallbacks[IN_DUCK] )
		if ( inputHint.triggerButtonEnum == IN_ZOOM )
			AddOptionalButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE, baseInputCallbacks[IN_ZOOM] )
	}

	thread TutorialContextPlayerThink( player )
}


void function TutorialContextPlayerThink( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "FreefallEnded" )

	OnThreadEnd(
		function() : ( player )
		{
			if ( !IsValid( player ) )
				return

			SetTutorialContext( player, eTutorialContext.NONE )

			foreach ( index, inputHint in file.inputHints )
			{
				if ( inputHint.triggerButtonEnum < 0 )
					continue

				if ( inputHint.triggerButtonEnum == IN_FORWARD )
				{	
					//comented out for function ref type change to bool - mkos
					//RemovePlayerPressedForwardCallback( player, baseInputCallbacks[inputHint.triggerButtonEnum] )
					//RemovePlayerPressedBackCallback( player, baseInputCallbacks[inputHint.triggerButtonEnum] )
				}
				else
				{
					RemoveButtonPressedPlayerInputCallback( player, inputHint.triggerButtonEnum, baseInputCallbacks[inputHint.triggerButtonEnum] )
				}

				if ( inputHint.triggerButtonEnum == IN_DUCK )
					RemoveButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE, baseInputCallbacks[IN_DUCK] )
				if ( inputHint.triggerButtonEnum == IN_ZOOM_TOGGLE )
					RemoveButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE, baseInputCallbacks[IN_ZOOM] )
			}
		}
	)

	int tutorialContext     = player.GetPlayerNetInt( "tutorialContext" )
	int lastTutorialContext = tutorialContext

	InitPlayerTutorialContextHistory( player, IsSurvivalTraining() )

	float nextUpdateTime = 0
	while ( true )
	{
		if ( tutorialContext != lastTutorialContext )
		{
			SetTutorialContext( player, tutorialContext )
		}

		lastTutorialContext = tutorialContext

		WaitFrame()

		if ( !IsAlive( player ) )
		{
			tutorialContext = -1
			continue
		}

		int matchState = PlayerMatchState_GetFor( player )
		switch ( matchState )
		{
			case ePlayerMatchState.TRAINING:
				tutorialContext = player.GetPlayerNetInt( "tutorialContext" )
				break

			case ePlayerMatchState.STAGING_AREA:
				array<entity> mainWeapons = player.GetMainWeapons()
				bool hasMainWeapons = false
				foreach ( weapon in mainWeapons )
				{
					if ( weapon.GetWeaponSettingBool( eWeaponVar.attack_button_presses_melee ) )
						continue

					hasMainWeapons = true
					break
				}
				tutorialContext = hasMainWeapons ? eTutorialContext.WEAPON : eTutorialContext.MOVEMENT

				break

			case ePlayerMatchState.SKYDIVE_PRELAUNCH:
				tutorialContext = eTutorialContext.PRELAUNCH
				break

			case ePlayerMatchState.SKYDIVE_FALLING:
				tutorialContext = eTutorialContext.FREEFALL
				break

			case ePlayerMatchState.NORMAL:
				tutorialContext = -1
				break
		}

		//if ( IsSurvivalTraining() )
		//	tutorialContext = player.GetPlayerNetInt( "tutorialContext" )

		if ( tutorialContext >= 0 && IsTutorialContextCompleted( player, tutorialContext ) && WasTutorialContextCompleted( player, tutorialContext ) )
			tutorialContext = -1

		if ( tutorialContext >= 0 && Time() >= nextUpdateTime )
		{
			foreach ( index, inputHint in file.contextInputHintMap[tutorialContext] )
			{
				if ( inputHint.triggerButtonEnum >= 0 )
					continue

				inputHint.triggerCallback( player, inputHint )
			}

			nextUpdateTime = Time() + 0.25
		}
	}
}


void function InitPlayerTutorialContextHistory( entity player, bool forceReset = false )
{
	array<bool> contextHistory

	for ( int tutorialContext; tutorialContext < eTutorialContext._count; tutorialContext++ )
	{
		bool wasCompleted = IsTutorialContextCompleted( player, tutorialContext ) && !forceReset
		contextHistory.append( wasCompleted )

		// zero out old completions when new hints are added
		if ( !wasCompleted )
			ResetPlayerTutorialContext( player, tutorialContext )
	}

	file.playerTutorialContextHistory[ player ] <- contextHistory
}


void function ResetPlayerTutorialContext( entity player, int tutorialContext )
{
	//player.SetPersistentVar( "tutorialActionCount[" + tutorialContext + "]", 0 ) // TODO: Add persistence var
}


bool function WasTutorialContextCompleted( entity player, int tutorialContext )
{
	return file.playerTutorialContextHistory[player][tutorialContext]
}


bool function IsTutorialContextCompleted( entity player, int tutorialContext )
{
	/*array<InputHint> inputHints = file.contextInputHintMap[tutorialContext]

	int contextBitField = player.GetPersistentVarAsInt( "tutorialActionCount[" + tutorialContext + "]" )

	foreach ( bitIndex, InputHint inputHint in inputHints )
	{
		if ( contextBitField & (1 << bitIndex) )
			continue

		return false
	}*/

	return true
}


void function SetTutorialInputCompleted( entity player, InputHint completedHint )
{
	/*array<InputHint> inputHints = file.contextInputHintMap[completedHint.context]

	int contextBitField = player.GetPersistentVarAsInt( "tutorialActionCount[" + completedHint.context + "]" )

	foreach ( bitIndex, InputHint inputHint in inputHints )
	{
		if ( inputHint != completedHint )
			continue

		contextBitField = contextBitField | (1 << bitIndex)
		player.SetPersistentVar( "tutorialActionCount[" + completedHint.context + "]", contextBitField )
		break
	}*/ // TODO: [SERVER] Persistent data not available for client #0
}


void function UpdateActionCount( entity player, InputHint inputHint )
{
	if ( player.GetPlayerNetInt( "tutorialContext" ) != inputHint.context )
		return

	Remote_CallFunction_NonReplay( player, "ServerCallback_ActionCountUpdated", inputHint.index, 1 )

	SetTutorialInputCompleted( player, inputHint )
}


#elseif CLIENT
void function OnLocalClientConnected( entity player )
{/*
	int usedIndices = 0
	foreach ( index, inputHint in file.inputHints )
	{
		if ( player.GetPersistentVar( "tutorialActionCount[" + index + "]" ) < 5 )
		{
			var hintRui = CreateCockpitRui( $"ui/tutorial_hint_line.rpak" )
			RuiSetString( hintRui, "hintText", inputHint.hintText )
			RuiSetInt( hintRui, "hintOffset", usedIndices )
	
			inputHint.rui = hintRui
			usedIndices++
		}
	}*/
}


void function OnTutorialContextChanged( entity player, int old, int new, bool actuallyChanged )
{
	if ( player != GetLocalClientPlayer() )
		return

	if ( old >= 0 )
	{
		foreach ( index, inputHint in file.contextInputHintMap[old] )
		{
			if ( inputHint.rui != null )
			{
				RuiDestroy( inputHint.rui )
				inputHint.rui = null
			}
		}
	}

	if ( new < 0 )
		return

	foreach ( index, inputHint in file.contextInputHintMap[new] )
	{
		var hintRui = CreateFullscreenRui( $"ui/tutorial_hint_line.rpak" )
		inputHint.rui = hintRui
		inputHint._completed = false

		RuiSetString( hintRui, "buttonText", inputHint.buttonText )
		RuiSetString( hintRui, "gamepadButtonText", inputHint.gamepadButtonText )
		RuiSetString( hintRui, "hintText", inputHint.hintText )
		RuiSetString( hintRui, "altHintText", inputHint.altHintText )
		RuiSetInt( hintRui, "hintOffset", index )
		RuiSetBool( hintRui, "hideWithMenus", inputHint.hideWithMenus )

		if ( inputHint.altHintCallback != null )
			inputHint.altHintCallback( player, inputHint )
	}

	UpdateTutorialBindingIcons()

	thread ClientTutorialContextThink( player, new )
}


void function ClientTutorialContextThink( entity player, int context )
{
	while ( player.GetPlayerNetInt( "tutorialContext" ) == context )
	{
		foreach ( index, inputHint in file.contextInputHintMap[context] )
		{
			RuiSetBool( inputHint.rui, "hintValid", inputHint.triggerCallback( player, inputHint ) )
		}

		WaitFrame()
		player = GetLocalClientPlayer()

		if ( !IsValid( player ) )
			return
	}
}


void function ServerCallback_ActionCountUpdated( int actionIndex, int actionCount )
{
	InputHint inputHint = file.inputHints[actionIndex]

	if ( inputHint.rui != null )
	{
		if ( !inputHint._completed )
		{
			EmitSoundOnEntity( GetLocalClientPlayer(), "UI_SurvivalTutorial_CheckBox" )
			inputHint._completed = true
		}

		RuiSetBool( inputHint.rui, "hintCompleted", true )
	}

	//if ( actionCount < inputHint.requiredActionCount )
	//	return

	//if ( inputHint.rui != null )
	//	RuiDestroy( inputHint.rui )
	//
	//inputHint.rui = null
}
#endif


void function PingAltHintInit( entity player, InputHint inputHint )
{
	#if CLIENT
		RuiTrackBool( inputHint.rui, "showAltHint", player, RUI_TRACK_SCRIPT_NETWORK_VAR_BOOL, GetNetworkedVariableIndex( "isJumpmaster" ) )
	#endif
}


InputHint function GetInputHintForButtonEnum( int buttonEnum )
{
	foreach ( index, inputHint in file.inputHints )
	{
		if ( inputHint.triggerButtonEnum != buttonEnum )
			continue

		return inputHint
	}

	unreachable
}


int function GetHintIndexForButtonEnum( int buttonEnum )
{
	foreach ( index, inputHint in file.inputHints )
	{
		if ( inputHint.triggerButtonEnum != buttonEnum )
			continue

		return index
	}

	return -1
}

#if CLIENT
void function UpdateTutorialBindingIcons()
{
	array<InputHint> movementHints = file.contextInputHintMap[eTutorialContext.MOVEMENT]
	for ( int i = 0; i < movementHints.len(); ++i )
	{
		if ( movementHints[i].rui == null )
			continue

		if ( movementHints[i].triggerButtonEnum == IN_FORWARD )
		{
			int stickLayout = GetConVarInt( "gamepad_stick_layout" )
			Assert( stickLayout >= 0 && stickLayout <= 3 )
			string gamepadHintStringForMovement = ""

			if ( stickLayout == 0 )
				gamepadHintStringForMovement = "%S2_UP%"
			else if ( stickLayout == 1 )
				gamepadHintStringForMovement = "%S1_UP%"
			else if ( stickLayout == 2 || stickLayout == 3 )
				gamepadHintStringForMovement = "%S2_UP% %S1_UP%"

			movementHints[i].gamepadButtonText = gamepadHintStringForMovement

			RuiSetString( movementHints[i].rui, "gamepadButtonText", movementHints[i].gamepadButtonText )

			break
		}
	}
}

void function UpdateTutorialWhenOptionsChange()
{
	UpdateTutorialBindingIcons()
}
#endif

void function AddInputHint( int hintContext, int triggerButtonEnum, string buttonText, string hintText, bool functionref( entity, InputHint ) inputPressedCallback, string altHintText = "", void functionref( entity, InputHint ) altHintCallback = null, string gamePadButtonText = "" )
{
	InputHint inputHint
	inputHint.triggerButtonEnum = triggerButtonEnum
	inputHint.buttonText = buttonText
	inputHint.gamepadButtonText = gamePadButtonText == "" ? buttonText : gamePadButtonText
	inputHint.hintText = hintText
	inputHint.altHintText = altHintText
	inputHint.triggerCallback = inputPressedCallback
	inputHint.altHintCallback = altHintCallback
	inputHint.index = file.inputHints.len()
	inputHint.context = hintContext
	inputHint.hideWithMenus = (hintContext != eTutorialContext.PRELAUNCH)

	file.inputHints.append( inputHint )

	file.contextInputHintMap[hintContext].append( inputHint )

	#if SERVER
		if ( triggerButtonEnum <= 0 )
			return

		baseInputCallbacks[triggerButtonEnum] <- void function( entity player ) : (triggerButtonEnum) {
			RunInputHintCallback( player, triggerButtonEnum )
		}
	#endif
}


void function RunInputHintCallback( entity player, int buttonEnum )
{
	foreach ( index, inputHint in file.inputHints )
	{
		if ( inputHint.triggerButtonEnum != buttonEnum )
			continue

		inputHint.triggerCallback( player, inputHint )
	}
}


bool function TryActionMove( entity player, InputHint inputHint )
{
	#if SERVER
		if ( player.GetVelocity() == <0, 0, 0> )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionJump( entity player, InputHint inputHint )
{
	#if SERVER
		if ( player.IsOnGround() )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionSprint( entity player, InputHint inputHint )
{
	#if SERVER
		if ( !player.IsSprinting() )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionHolster( entity player, InputHint inputHint )
{
	#if SERVER
		entity weapon = player.GetActiveWeapon(0)
		if ( !IsValid( weapon ) || weapon.GetWeaponClassName() != "mp_weapon_melee_survival" )
			return false
		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionCrouch( entity player, InputHint inputHint )
{
	#if SERVER
		if ( !player.IsOnGround() )
			return false

		if ( player.IsSprinting() )
			return false

		if ( player.IsSliding() )
			return false

		if ( player.IsStanding() || player.IsCrouched() )
			return false

		//thread TryActionCrouch_Internal( player, inputHint )
		UpdateActionCount( player, inputHint )
	#else
		if ( player.IsSprinting() )
			return false
	#endif

	return true
}


bool function TryActionCrouch_Internal( entity player, InputHint inputHint )
{
	#if SERVER
		float endTime = Time() + 1.0
		while ( Time() < endTime || !player.IsCrouched() )
		{
			WaitFrame()
		}

		if ( !player.IsOnGround() || !player.IsCrouched() && player.IsSprinting() )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionTactical( entity player, InputHint inputHint )
{
	entity weapon = player.GetOffhandWeapon( OFFHAND_TACTICAL )
	if ( !IsValid( weapon ) )
		return false

	int ammoPerShot = weapon.GetAmmoPerShot()
	if ( weapon.GetWeaponPrimaryClipCount() < ammoPerShot )
		return false

	#if SERVER
		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionSlide( entity player, InputHint inputHint )
{
	#if SERVER
		if ( !player.IsSliding() )
			return false

		UpdateActionCount( player, inputHint )
	#else
		if ( !player.IsSprinting() )
			return false
	#endif

	return true
}


bool function TryActionFireMode( entity player, InputHint inputHint )
{
	entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
	if ( !weapon )
		return false

	if ( DoesModExist( weapon, "hopup_selectfire" ) && !weapon.HasMod( "hopup_selectfire" ) || !DoesModExist( weapon, "altfire" ) )
		return false

	#if SERVER
		if ( !weapon.HasMod( "altfire" ) )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionWeaponCycle( entity player, InputHint inputHint )
{
	if ( SURVIVAL_GetPrimaryWeapons( player ).len() < 2 )
		return false

	#if SERVER
		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionPing( entity player, InputHint inputHint )
{
	#if SERVER
		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionADS( entity player, InputHint inputHint )
{
	#if SERVER
		entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
		if ( !weapon )
			return false

		if ( !weapon.IsWeaponInAds() )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionFreeLook( entity player, InputHint inputHint )
{
	#if SERVER
		if ( !player.GetPlayerNetBool( "skydiveFreelookActive" ) )
			return false

		UpdateActionCount( player, inputHint )
	#endif

	return true
}


bool function TryActionReload( entity player, InputHint inputHint )
{
	entity weapon = player.GetActiveWeapon( eActiveInventorySlot.mainHand )
	if ( !weapon )
		return false

	#if SERVER
		if ( !weapon.IsReloading() )
			return false

		UpdateActionCount( player, inputHint )
	#else
		if ( weapon.GetWeaponPrimaryClipCount() == weapon.GetWeaponPrimaryClipCountMax() )
			return false
	#endif

	return true
}


bool function TryActionBlank( entity player, InputHint inputHint )
{
	return true
}