// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sig_map.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sig_5fmap_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sig_5fmap_2eproto

#include <limits>
#include <string>

#include <thirdparty/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <thirdparty/protobuf/port_undef.inc>
#include <thirdparty/protobuf/io/coded_stream.h>
#include <thirdparty/protobuf/arena.h>
#include <thirdparty/protobuf/arenastring.h>
#include <thirdparty/protobuf/generated_message_util.h>
#include <thirdparty/protobuf/metadata_lite.h>
#include <thirdparty/protobuf/message_lite.h>
#include <thirdparty/protobuf/repeated_field.h>  // IWYU pragma: export
#include <thirdparty/protobuf/extension_set.h>  // IWYU pragma: export
#include <thirdparty/protobuf/map.h>  // IWYU pragma: export
#include <thirdparty/protobuf/map_entry_lite.h>
#include <thirdparty/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <thirdparty/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sig_5fmap_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sig_5fmap_2eproto {
  static const uint32_t offsets[];
};
class SigMap_Pb;
struct SigMap_PbDefaultTypeInternal;
extern SigMap_PbDefaultTypeInternal _SigMap_Pb_default_instance_;
class SigMap_Pb_SMapEntry_DoNotUse;
struct SigMap_Pb_SMapEntry_DoNotUseDefaultTypeInternal;
extern SigMap_Pb_SMapEntry_DoNotUseDefaultTypeInternal _SigMap_Pb_SMapEntry_DoNotUse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SigMap_Pb* Arena::CreateMaybeMessage<::SigMap_Pb>(Arena*);
template<> ::SigMap_Pb_SMapEntry_DoNotUse* Arena::CreateMaybeMessage<::SigMap_Pb_SMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SigMap_Pb_SMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SigMap_Pb_SMapEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<SigMap_Pb_SMapEntry_DoNotUse, 
    std::string, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  SigMap_Pb_SMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR SigMap_Pb_SMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit SigMap_Pb_SMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const SigMap_Pb_SMapEntry_DoNotUse& other);
  static const SigMap_Pb_SMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SigMap_Pb_SMapEntry_DoNotUse*>(&_SigMap_Pb_SMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "SigMap_Pb.SMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_sig_5fmap_2eproto;
};

// -------------------------------------------------------------------

class SigMap_Pb final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:SigMap_Pb) */ {
 public:
  inline SigMap_Pb() : SigMap_Pb(nullptr) {}
  ~SigMap_Pb() override;
  explicit PROTOBUF_CONSTEXPR SigMap_Pb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SigMap_Pb(const SigMap_Pb& from);
  SigMap_Pb(SigMap_Pb&& from) noexcept
    : SigMap_Pb() {
    *this = ::std::move(from);
  }

  inline SigMap_Pb& operator=(const SigMap_Pb& from) {
    CopyFrom(from);
    return *this;
  }
  inline SigMap_Pb& operator=(SigMap_Pb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const SigMap_Pb& default_instance() {
    return *internal_default_instance();
  }
  static inline const SigMap_Pb* internal_default_instance() {
    return reinterpret_cast<const SigMap_Pb*>(
               &_SigMap_Pb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SigMap_Pb& a, SigMap_Pb& b) {
    a.Swap(&b);
  }
  inline void Swap(SigMap_Pb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SigMap_Pb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SigMap_Pb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SigMap_Pb>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SigMap_Pb& from);
  void MergeFrom(const SigMap_Pb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SigMap_Pb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SigMap_Pb";
  }
  protected:
  explicit SigMap_Pb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSMapFieldNumber = 1,
  };
  // map<string, uint64> sMap = 1;
  int smap_size() const;
  private:
  int _internal_smap_size() const;
  public:
  void clear_smap();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      _internal_smap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      _internal_mutable_smap();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
      smap() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
      mutable_smap();

  // @@protoc_insertion_point(class_scope:SigMap_Pb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
        SigMap_Pb_SMapEntry_DoNotUse,
        std::string, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> smap_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sig_5fmap_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SigMap_Pb

// map<string, uint64> sMap = 1;
inline int SigMap_Pb::_internal_smap_size() const {
  return _impl_.smap_.size();
}
inline int SigMap_Pb::smap_size() const {
  return _internal_smap_size();
}
inline void SigMap_Pb::clear_smap() {
  _impl_.smap_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
SigMap_Pb::_internal_smap() const {
  return _impl_.smap_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >&
SigMap_Pb::smap() const {
  // @@protoc_insertion_point(field_map:SigMap_Pb.sMap)
  return _internal_smap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
SigMap_Pb::_internal_mutable_smap() {
  return _impl_.smap_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >*
SigMap_Pb::mutable_smap() {
  // @@protoc_insertion_point(field_mutable_map:SigMap_Pb.sMap)
  return _internal_mutable_smap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <thirdparty/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sig_5fmap_2eproto
